// Copyright 2020 Michael Zogin
#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>

#include <limits.h>
#include <math.h>

#include <exception>
#include <iostream>
#include <stdexcept>
#include <string>
#include <vector>

#include "StringSound.h"

#define CONCERT 440.0
#define SAMPLE_RATE 44100
const int key_size = 37;

using std::string;

vector<sf::Int16> makeSample(StringSound &sound) {
  vector<sf::Int16> samples;

  sound.pluck();

  int duration = 8;

  for (int i = 0; i < SAMPLE_RATE * duration; i++) {
    sound.tic();
    samples.push_back(sound.sample());
  }
  return samples;
}

int main() {
  // const int key_size = 37;

  sf::RenderWindow window(sf::VideoMode(800, 800), "KSGuitarSim");
  sf::Event event;

  double freq;
  vector<sf::Int16> sample;
  string keyboard =
      "q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/' ";  // keyboard arrangement

  vector<std::vector<sf::Int16>> samples(
      key_size);  // holds audio sample stream generated by StringSound
  vector<sf::SoundBuffer> buffer(key_size);
  vector<sf::Sound> sounds(key_size);  // vector of sounds to be played

  for (int i = 0; i < (signed)keyboard.size(); i++) {
    freq = CONCERT * pow(2, (i - 24) / 12.0);  // get frequency of each key

    StringSound temp(freq);
    sample = makeSample(temp);

    samples[i] = makeSample(temp);

    if (i >= key_size)
      return -1;
    if (!buffer[i].loadFromSamples(&samples[i][0], samples[i].size(), 2,
                                   SAMPLE_RATE)) {
      throw std::runtime_error("failed to load");
    }

    sounds[i].setBuffer(buffer[i]);
  }

  while (window.isOpen()) {
    while (window.pollEvent(event)) {
      if (event.type == sf::Event::Closed) {
        window.close();
      } else if (event.type == sf::Event::TextEntered) {
        // make sure char is in ASCII range
        if (event.text.unicode < 128) {
          char key = static_cast<char>(event.text.unicode);  // cast to a char
          // loop through keyboard
          for (int j = 0; j < (signed)keyboard.size(); j++) {
            // matching key found
            if (keyboard[j] == key) {
              cout << "key is: " << keyboard[j] << endl;
              cout << "playing.." << endl;
              sounds[j].play();  // play the sound for that key
              break;
            }
          }
        }
      }
    }
    window.clear();
    window.display();
  }
  return 0;
}
